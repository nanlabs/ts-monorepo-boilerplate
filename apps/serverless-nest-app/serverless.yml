service: ${env:SERVICE_NAME, 'Nest'}

frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript
  - serverless-offline-ssm
  - serverless-offline

useDotenv: true

package:
  individually: true
  excludeDevDependencies: true

custom:
  postgres:
    secretName: ${param:postgresSecretName, env:POSTGRES_SECRET_NAME, ''}
    # values below will be used for local development
    host: ${env:POSTGRES_HOST, ''}
    port: ${env:POSTGRES_PORT, ''}
    username: ${env:POSTGRES_USER, ''}
    password: ${env:POSTGRES_PASSWORD, ''}
    database: ${env:POSTGRES_DATABASE, ''}
    ssl: ${env:POSTGRES_SSL, ''}
  serverless-offline:
    httpPort: 3000
    port: 3000
    useChildProcesses: true
    noPrependStageInUrl: true
  serverless-offline-ssm:
    stages:
      - local
      - offline
    ssm:
      # mock SSM parameters here. An empty object will mock all parameters as empty strings by default

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, env:STAGE, 'local'}
  region: ${opt:region, env:AWS_REGION, 'us-east-1'}
  profile: ${opt:aws-profile, env:AWS_PROFILE, ''}
  deploymentBucket:
    blockPublicAccess: true
    versioning: true
    serverSideEncryption: AES256

functions:
  main:
    handler: src/lambda.handler
    events:
      - http:
          method: ANY
          path: /
      - http:
          method: ANY
          path: '{proxy+}'
    environment:
      STAGE: ${self:provider.stage}
      POSTGRES_SECRET_NAME: ${self:custom.postgres.secretName}
      # values below will be used for local development
      POSTGRES_HOST: ${self:custom.postgres.host}
      POSTGRES_PORT: ${self:custom.postgres.port}
      POSTGRES_USER: ${self:custom.postgres.username}
      POSTGRES_PASSWORD: ${self:custom.postgres.password}
      POSTGRES_DATABASE: ${self:custom.postgres.database}
      POSTGRES_SSL: ${self:custom.postgres.ssl}
