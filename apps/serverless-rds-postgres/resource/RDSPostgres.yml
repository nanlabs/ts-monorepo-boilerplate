Resources:
  RDSPostgresInstance:
    Type: AWS::RDS::DBInstance
    Condition: CreateRDSPostgres
    Properties:
      MasterUsername:
        Fn::Sub:
          - "{{resolve:secretsmanager:${SecretName}:SecretString:username}}"
          - SecretName: !Ref RDSPostgresConnectionSecret
      MasterUserPassword:
        Fn::Sub:
          - "{{resolve:secretsmanager:${SecretName}:SecretString:password}}"
          - SecretName: !Ref RDSPostgresConnectionSecret
      AllocatedStorage: 20
      DBName: ${self:custom.postgres.database}
      DBInstanceClass: db.t4g.small
      DBSubnetGroupName: !Ref RDSPostgresSubnetGroup
      Engine: postgres
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref RDSPostgresSecurityGroup

  RDSPostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateRDSPostgres
    Properties:
      GroupDescription: Allow HTTP and HTTPS from anywhere
      VpcId: ${self:variables.values.VpcId}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: ${self:custom.vpc.cidr}
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: ${env:GLUE_VPC_CIDR}
      Tags:
        - Key: Name
          Value: ${self:service}-${self:provider.stage}-RDS-security-group

  RDSPostgresSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: CreateRDSPostgres
    Properties:
      DBSubnetGroupDescription: ${self:service}-${self:provider.stage}-RDS-subnet-group
      DBSubnetGroupName: ${self:service}-${self:provider.stage}-RDS-subnet-group
      SubnetIds:
        - ${self:variables.values.PrivateSubnetOne}
        - ${self:variables.values.PrivateSubnetTwo}
      Tags:
        - Key: Name
          Value: ${self:service}-${self:provider.stage}-RDS-subnet-group
